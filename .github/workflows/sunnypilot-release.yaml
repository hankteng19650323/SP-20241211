name: SunnyPilot CI

env:
  BUILD_DIR: "/data/openpilot"
  OUTPUT_DIR: ${{ github.workspace }}/output
  CI_DIR: ${{ github.workspace }}/release/ci
  BASE_BUILD_NUMBER: 3000
  PUBLIC_REPO_URL: "https://github.com/sunnyhaibin/sunnypilot"
  DEV_C3_SOURCE_BRANCH: "master-dev-c3"

on:
  push:
    branches: [ master, master-new, master-dev-c3, kumar-wants-gitlab-prebuilt ]
    tags: [ '*' ]
  pull_request:
    branches: [ master, master-new ]
  workflow_dispatch:
    inputs:
      extra_version:
        description: 'Extra version identifier'
        required: false
        default: ''

jobs:
  build:
    runs-on: self-hosted
    outputs:
      auto_build: ${{ steps.set-env.outputs.auto_build }}
      auto_publish: ${{ steps.set-env.outputs.auto_publish }}
      new_branch: ${{ steps.set-env.outputs.new_branch }}
      version: ${{ steps.set-env.outputs.version }}
      extra_version_identifier: ${{ steps.set-env.outputs.extra_version_identifier }}
    
    if: |
      !contains(github.event.head_commit.message, 'wip:') && 
      !contains(github.event.head_commit.message, 'draft:')
    
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set environment variables
        id: set-env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "new_branch=${GITHUB_REF_NAME}-prebuilt" >> $GITHUB_OUTPUT
            echo "extra_version_identifier=${{ github.event.inputs.extra_version || github.run_number }}" >> $GITHUB_OUTPUT
            echo "version=$(date '+%Y.%m.%d')" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_name }}" == "${{ env.DEV_C3_SOURCE_BRANCH }}" ]]; then
            echo "new_branch=dev-c3" >> $GITHUB_OUTPUT
            echo "extra_version_identifier=${{ github.run_number }}" >> $GITHUB_OUTPUT
            echo "auto_build=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            echo "new_branch=staging-c3" >> $GITHUB_OUTPUT
            echo "extra_version_identifier=staging" >> $GITHUB_OUTPUT
            echo "auto_build=true" >> $GITHUB_OUTPUT
            echo "auto_publish=true" >> $GITHUB_OUTPUT
            echo "version=$(cat common/version.h | grep COMMA_VERSION | sed -e 's/[^0-9|.]//g')" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "new_branch=release-c3" >> $GITHUB_OUTPUT
            echo "extra_version_identifier=release" >> $GITHUB_OUTPUT
            echo "auto_build=true" >> $GITHUB_OUTPUT
            echo "version=$(cat common/version.h | grep COMMA_VERSION | sed -e 's/[^0-9|.]//g')" >> $GITHUB_OUTPUT
          else
            echo "version=$(date '+%Y.%m.%d')-${{ github.run_number }}" >> $GITHUB_OUTPUT
          fi

      - name: Setup build environment
        run: |
          mkdir -p "${BUILD_DIR}/"
          find $BUILD_DIR/ -mindepth 1 -delete
          echo "Starting build stage..."
          echo "BUILD_DIR: ${BUILD_DIR}"
          echo "CI_DIR: ${CI_DIR}"
          echo "VERSION: ${{ steps.set-env.outputs.version }}"

      - name: Build Panda
        run: |
          source /etc/profile;
          uv run scons -j$(nproc) cache_dir=${CI_DIR}/scons_cache ${{ github.workspace }}/panda

      - name: Build Main Project
        run: |
          source /etc/profile;
          export PYTHONPATH="$BUILD_DIR"
          ./release/release_files.py | sort | uniq | rsync -vrRl --files-from=- . $BUILD_DIR/
          cd $BUILD_DIR
          sed -i '/from .board.jungle import PandaJungle, PandaJungleDFU/s/^/#/' panda/__init__.py
          uv run scons -j$(nproc) cache_dir=${CI_DIR}/scons_cache --minimal
          touch ${BUILD_DIR}/prebuilt

      - name: Prepare Output
        run: |
          sudo rm -rf ${OUTPUT_DIR}
          mkdir -p ${OUTPUT_DIR}
          rsync -avm \
            --include='**/panda/board/' \
            --include='**/panda/board/obj' \
            --include='**/panda/board/obj/panda.bin.signed' \
            --include='**/panda/board/obj/panda_h7.bin.signed' \
            --include='**/panda/board/obj/bootstub.panda.bin' \
            --include='**/panda/board/obj/bootstub.panda_h7.bin' \
            --exclude='.sconsign.dblite' \
            --exclude='*.a' \
            --exclude='*.o' \
            --exclude='*.os' \
            --exclude='*.pyc' \
            --exclude='moc_*' \
            --exclude='*.cc' \
            --exclude='Jenkinsfile' \
            --exclude='supercombo.onnx' \
            --exclude='**/panda/board/*' \
            --exclude='**/panda/board/obj/**' \
            --exclude='**/panda/certs/' \
            --exclude='**/panda/crypto/' \
            --exclude='**/release/' \
            --exclude='**/.github/' \
            --exclude='**/selfdrive/ui/replay/' \
            --exclude='**/__pycache__/' \
            --exclude='**/selfdrive/ui/*.h' \
            --exclude='**/selfdrive/ui/**/*.h' \
            --exclude='**/selfdrive/ui/qt/offroad/sunnypilot/' \
            --exclude='**/.git/' \
            --exclude='**/SConstruct' \
            --exclude='**/SConscript' \
            --exclude='**/.venv/' \
            --delete-excluded \
            --chown=comma:comma \
            ${BUILD_DIR}/ ${OUTPUT_DIR}/

      - name: Cache SCons
        uses: actions/cache@v4
        with:
          path: ${{ env.CI_DIR }}/scons_cache
          key: ${{ runner.os }}-scons-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-scons-

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: ${{ env.OUTPUT_DIR }}

  publish-private:
    needs: build
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'pull_request' ||
      needs.build.outputs.auto_build == 'true'
    
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4.1.7
        with:
          name: build-output
          path: ${{ env.OUTPUT_DIR }}

      - name: Configure Git
        run: |
          git config --global user.email "gitlab@pipeline.com"
          git config --global user.name "Github Pipeline"

      - name: Publish to Private Repository
        env:
          SSH_PRIVATE_KEY: ${{ secrets.GITLAB_SSH_KEY }}
        run: |
          eval $(ssh-agent -s)
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -H gitlab.com >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          
          ${{ env.CI_DIR }}/publish.sh \
            "${{ github.workspace }}" \
            "${{ env.OUTPUT_DIR }}" \
            "${{ needs.build.outputs.new_branch }}" \
            "${{ needs.build.outputs.version }}" \
            "git@gitlab.com:sunnypilot/public/sunnypilot-prebuilts.git" \
            "-${{ needs.build.outputs.extra_version_identifier }}"

  publish-public:
    needs: build
    runs-on: ubuntu-latest
    if: |
      needs.build.outputs.auto_publish == 'true' ||
      github.event_name == 'workflow_dispatch'
    environment: manual-approval
    
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-output
          path: ${{ env.OUTPUT_DIR }}

      - name: Configure Git
        run: |
          git config --global user.email "jason.wen@sunnypilot.ai"
          git config --global user.name "Jason Wen"

      - name: Publish to Public Repository
        env:
          SSH_PRIVATE_KEY: ${{ secrets.GITHUB_SSH_KEY }}
        run: |
          eval $(ssh-agent -s)
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -H github.com >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          
          ${{ env.CI_DIR }}/publish.sh \
            "${{ github.workspace }}" \
            "${{ env.OUTPUT_DIR }}" \
            "${{ needs.build.outputs.new_branch }}" \
            "${{ needs.build.outputs.version }}" \
            "git@github.com:sunnyhaibin/sunnypilot.git" \
            "-${{ needs.build.outputs.extra_version_identifier }}"

  notify:
    needs: [build, publish-private, publish-public]
    runs-on: ubuntu-latest
    if: always() && needs.build.outputs.new_branch != ''
    
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq gettext-base

      - name: Send Discord Notification
        env:
          DISCORD_WEBHOOK: ${{ needs.build.outputs.new_branch == 'dev-c3' && secrets.DISCORD_NEW_BUILD_WEBHOOK_URL || secrets.DISCORD_MANUAL_BUILD_WEBHOOK_URL }}
        run: |
          TEMPLATE="${{ needs.build.outputs.new_branch == 'dev-c3' && 'discord_template_notify_dev_public.json' || 'discord_template_notify_dev_private.json' }}"
          export EXTRA_VERSION_IDENTIFIER="${{ needs.build.outputs.extra_version_identifier }}"
          export VERSION="${{ needs.build.outputs.version }}"
          cat release/ci/${TEMPLATE} | envsubst > payload.json
          curl -X POST -H "Content-Type: application/json" -d @payload.json $DISCORD_WEBHOOK